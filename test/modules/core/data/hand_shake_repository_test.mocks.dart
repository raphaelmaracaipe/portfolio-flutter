// Mocks generated by Mockito 5.4.2 from annotations
// in portfolio_flutter/test/modules/core/data/hand_shake_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:portfolio_flutter/modules/core/data/network/request/request_hand_shake.dart'
    as _i4;

import 'hand_shake_repository_test.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [RestHandShakeMock].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestHandShakeMock extends _i1.Mock implements _i2.RestHandShakeMock {
  MockRestHandShakeMock() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> requestHandShake(_i4.RequestHandShake? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestHandShake,
          [request],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [KeySpMock].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeySpMock extends _i1.Mock implements _i2.KeySpMock {
  MockKeySpMock() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> isExistKeyAndIVSaved() => (super.noSuchMethod(
        Invocation.method(
          #isExistKeyAndIVSaved,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<void> saveKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #saveKey,
          [key],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> saveIV(String? iv) => (super.noSuchMethod(
        Invocation.method(
          #saveIV,
          [iv],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<String> getKey() => (super.noSuchMethod(
        Invocation.method(
          #getKey,
          [],
        ),
        returnValue: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
  @override
  _i3.Future<String> getSeed() => (super.noSuchMethod(
        Invocation.method(
          #getSeed,
          [],
        ),
        returnValue: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
}
